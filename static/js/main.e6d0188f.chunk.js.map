{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","Cardlist","robots","cardArray","map","user","i","Searchbox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","Error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","App","OnsearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,G,MAdF,SAACC,GACb,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,WACzD,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCcCC,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIZC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OAAO,kBAAC,EAAD,CAAMT,GAAIK,EAAOI,GAAGT,GAAIE,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAGvE,OACC,6BAECG,ICEYI,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKb,UAAU,OACX,2BACAA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCYRI,E,kDAnBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAW,GAHN,E,8DAOKC,EAAMC,GACpBC,KAAKC,SAAS,CAAEJ,UAAW,M,+BAK3B,OAAIG,KAAKJ,MAAMC,SACJ,+DAEJG,KAAKvB,MAAMyB,a,GAjBEC,aCObC,EARA,SAAC3B,GACZ,OACI,yBAAK4B,MAAO,CAAEC,UAAY,SAAWC,OAAS,kBAAmBC,OAAQ,UACxE/B,EAAMyB,WC2CAO,G,wDAvCX,aAAe,IAAD,8BACV,gBAgBJC,eAAkB,SAACC,GACf,EAAKV,SAAS,CAAEW,YAAcD,EAAME,OAAOC,SAhB3C,EAAKlB,MAAQ,CACbX,OAAS,GACT2B,YAAc,IAJJ,E,gEAQM,IAAD,OACnBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKlB,SAAS,CAAChB,OAASkC,S,+BAU7B,IAAD,OACCC,EAAiBpB,KAAKJ,MAAMX,OAAOoC,QAAO,SAAApC,GAC5C,OAAOA,EAAOH,KAAKwC,cAAcC,SAAS,EAAK3B,MAAMgB,YAAYU,kBAEjE,OACA,yBAAM5C,UAAU,MACZ,wBAAIA,UAAW,MAAf,eACA,kBAAC,EAAD,CAAWa,aAAeS,KAAKU,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQmC,W,GAhCxBjB,cCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e6d0188f.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\nconst Card = (props) => {\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br2 pa1 ma2 grow bw2 shadow-5'>\r\n\t\t<img src={`https://robohash.org/${props.id}?100x100`} alt='robots' />\r\n\t\t\t<div>\r\n\t\t\t\t<h5>{props.name}</h5>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist = ({robots}) => {\r\n\t// if(true){\r\n\t// \tthrow new Error('NOOOO');\r\n\t// }     Enable this if you want to see the error boundary working\r\n\tconst cardArray = robots.map((user,i) => {\r\n\t\treturn <Card id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\r\n\t})\r\n return (\r\n \t<div>  \t\r\n\r\n\t\t{cardArray}\r\n\r\n\t</div>\r\n\r\n \t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\n\r\nconst Searchbox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input \r\n            className='pa3 ba b--green bg-lightest-blue' \r\n            type='search' \r\n            placeholder='Search Robots'\r\n            onChange= {searchChange}\r\n             />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(Error,info) {\r\n        this.setState({ hasError : true})\r\n\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>'Oops. There might be an error'</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{ overflowY : 'scroll' , border : '1px solid black', height: '500px'}}>\r\n        {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport Searchbox from '../components/Searchbox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n// import {robots} from './robots.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n        robots : [],\r\n        searchField : ''    \r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots : users}));\r\n    }\r\n\r\n\r\n\r\n\r\n    OnsearchChange =  (event) => {\r\n        this.setState({ searchField : event.target.value})\r\n    }\r\n\r\n     render(){\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n        })\r\n            return (\r\n            <div  className='tc'>\r\n                <h1 className= 'f1'>ROBOFRIENDS</h1>\r\n                <Searchbox searchChange= {this.OnsearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <Cardlist robots={filteredRobots} />\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>  \r\n             );\r\n        }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}